import java.util.ArrayList;


public class ChocolateDividingEasy {
	//2D
	public int [][] getIintervalSumArray2D(int [][]input) {
		int row = input.length;
		if (row <= 0) {
			return null;
		}
		int col = input[0].length;
		int [][]output = new int[row][col];
		if (col <= 0) {
			return output;
		}
		output[0][0] = input[0][0];
		for (int i=1; i<row; i++) {
			output[i][0] = input[i][0];
		}
		for (int i=0; i<row; i++) {
			for (int j=1; j<col; j++) {
				output[i][j] = output[i][j-1] + input[i][j];
			}
			if (i==0) {
				continue;
			}
			for (int j=0; j<col; j++) {
				output[i][j] += output[i-1][j];
			}
		}
		return output;
	}
	public int getIntervalSum2D(int [][]sums, int y1, int y2, int x1, int x2) {
		if (y1 < 0 || x1 < 0 || y2 < 1 || x2 < 1) {
			return 0;
		}
		int sumleft = 0, sumabove = 0, sumleftabove = 0;
		if (y1 > 0) {
			sumabove = sums[y1-1][x2-1];
		}
		if (x1 > 0) {
			sumleft = sums[y2-1][x1-1];
		}
		if (y1 > 0 && x1 > 0) {
			sumleftabove = sums[y1-1][x1-1];
		}
		return sums[y2-1][x2-1] + sumleftabove - sumleft - sumabove;
	}
	
	
	
	public int findBest(String[] chocolate) {
		int r = chocolate.length;
		int c = chocolate[0].length();
		int [][] ch = new int[r][c];
		for (int i=0; i<r; i++) {
			String therow = chocolate[i];
			for (int j=0; j<c; j++) {
				ch[i][j] = ((int)therow.charAt(j)) - (int)'0';
			}
		}
		int [][] sums = getIintervalSumArray2D(ch);
		/*
		for (int i1=0; i1<r; i1++) {
			for (int j1=0; j1<c; j1++) {
				System.out.print(" " + sums[i1][j1]);
			}
			System.out.println();
		}
		*/
		
		int maxans = 0;
		for (int i1=1; i1<r-1; i1++) {
			//System.out.println("\n" + i1 + "/" + (r-1) + ": ");
			for (int i2=i1+1; i2<r; i2++) {
				//System.out.print(", "+i2);
				for (int j1=1; j1<c-1; j1++) {
					for (int j2=j1+1; j2<c; j2++) {
						int tmpmin = 100000000;
						int j3 = c;
						int i3 = r;
						int i0=0,j0=0;
						int [] tmpsum = new int[9];
						tmpsum[0] = getIntervalSum2D(sums, i0, i1, j0, j1);
						tmpsum[1] = getIntervalSum2D(sums, i0, i1, j1, j2);
						tmpsum[2] = getIntervalSum2D(sums, i0, i1, j2, j3);
						tmpsum[3] = getIntervalSum2D(sums, i1, i2, j0, j1);
						tmpsum[4] = getIntervalSum2D(sums, i1, i2, j1, j2);
						tmpsum[5] = getIntervalSum2D(sums, i1, i2, j2, j3);
						tmpsum[6] = getIntervalSum2D(sums, i2, i3, j0, j1);
						tmpsum[7] = getIntervalSum2D(sums, i2, i3, j1, j2);
						tmpsum[8] = getIntervalSum2D(sums, i2, i3, j2, j3);
						
						for (int k=0; k<tmpsum.length; k++) {
							if (tmpsum[k] < tmpmin) {
								tmpmin = tmpsum[k];
							}
						}
						if (tmpmin > maxans) {
							maxans = tmpmin;
						}
						
						/*
						System.out.print(""+i1+","+i2+","+j1+","+j2+" = [");
						for (int k=0; k<tmpsum.length; k++) {
							System.out.print("" + tmpsum[k] + ",");
						}
						System.out.println("]");
						*/
					}
				}
			}
		}
		
		return maxans;
	}
	public static void main(String [] var) {
		System.out.println("" + (new ChocolateDividingEasy()).findBest(new String[]{
				"980423274569968676693007143953143105742320217296", 
				"965268192590006347831363516236142890809178371905", 
				"810066519265879278269198226338021047899037514451", 
				"577416230084906022021925878246593556391401011833", 
				"036140820964525090929081284568983708702919363894", 
				"086207327804892184177678527016436256991791392722", 
				"449128191894657475194485736108364496315616001941", 
				"472010783315442891744208128232580701982435070461", 
				"735477289034202485895248768724099758479592022482", 
				"964488566358969055804954178626033683451287275290", 
				"972370707589413973248468317036243572575445486974", 
				"420288239954578046513067528217879019832027497391", 
				"943461323166963064069461412141458914048584190698", 
				"217183426650017818433391920291015733377962263966", 
				"800351653672974479928614032438239464521908118767", 
				"859740346601434572236348279077955821865626789348", 
				"563317337554249924032816494528306958893541985100", 
				"525906547992052849648204313023095786452372579975", 
				"969789213717247717575832289386872762903477193896",
				"846349587615414711121761470989566310281244906499",
				"711087144232300943281307920569450558492937360684",
				"904357249227262449308791758716328773429541280456",
				"406498663636460260722688809074614453232795534672",
				"644034837734315952386557211890077770173078409104",
				"454222945234351240267784537447082526720265813137",
				"155044597251182536120367960474101706177013323598",
				"400448156215825117927748283552395541578119693315",
				"009994812387717283530342423856389278872000004922",
				"208452605202850990087200400094534382562284799980",
				"988929191393966696873213682703713606737866183044",
				"621143523993265647411129957451945259501920249723",
				"585897914750064691564956102095463145048433432013",
				"479887497628365991497230706127466644306098826515",
				"774419719344290957587106901564054697688713164251",
				"101843733011438820888650196733845129415018361265",
				"243031262065569181045746504943469084333559015945",
				"240746698202570771104479572386803007968789266235",
				"367914183311221521439218356179635328937290512787",
				"022265200810703457353292255743665881603605677122",
				"979291438922400911273634123037224445701513956967",
				"094457081385127764336608195792411878876934668437",
				"082643662233407784584309965728429713071497057747",
				"316948834339473364862033731405157953737490339886",
				"364787252314950845340009254432061659485618323320",
				"066086231876395450318002936461667485220317248704",
				"735847250016184825657800846616210016753854474177",
				"654546623204137330105483850389247891675925638381",
				"494134411669683365652144609747806419963029000556",
				"011548918184886758646168161146940314315345826491",
				"487013122456072024777201083855915846171318137461"
			}));

		System.out.println("" + (new ChocolateDividingEasy()).findBest(new String[]{
				"9768",
				"6767",
				"5313"
			}));
	}
}
